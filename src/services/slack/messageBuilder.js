import { dateOnlyIsoString } from "../../utils/date.js";

export function getHoursList() {
  const list = [];
  for (let h = 0.5; h <= 10; h += 0.5) {
    list.push({
      text: {
        type: "plain_text",
        text: h.toString(),
      },
      value: (h * 60).toString(),
    });
  }
  return list;
}

export function getProjectList(projects = []) {
  const projectList = [];
  for (const project of projects) {
    const { subprojects, name, channelName } = project;
    const projectName = name || channelName;
    if (Array.isArray(subprojects) && subprojects.length > 0) {
      subprojects.forEach((subproject, i) => {
        projectList.push({
          text: {
            type: "plain_text",
            text: projectName + " | " + subproject,
            emoji: true,
          },
          value: project?.id + "_" + i,
        });
      });
    } else {
      projectList.push({
        text: {
          type: "plain_text",
          text: projectName,
          emoji: true,
        },
        value: project?.id,
      });
    }
  }
  return projectList;
}

export function timeModal({ triggerId, projects, selectedProject }) {
  const today = new Date();
  const todayDate = dateOnlyIsoString(today);
  const hoursList = getHoursList();
  const projectList = getProjectList(projects);
  const selProjectList = getProjectList(selectedProject);
  const modal = {
    type: "modal",
    callback_id: "timeModal",
    title: {
      type: "plain_text",
      text: "Time Manager",
      emoji: true,
    },
    submit: {
      type: "plain_text",
      text: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å",
      emoji: true,
    },
    close: {
      type: "plain_text",
      text: "–û—Ç–º–µ–Ω–∞",
      emoji: true,
    },
    blocks: [
      {
        type: "input",
        block_id: "dateBlock",
        element: {
          type: "datepicker",
          action_id: "dateAction",
          initial_date: todayDate,
          placeholder: {
            type: "plain_text",
            text: "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É",
            emoji: true,
          },
        },
        label: {
          type: "plain_text",
          text: "–ö–æ–≥–¥–∞ –≤—ã —Ä–∞–±–æ—Ç–∞–ª–∏?",
          emoji: true,
        },
      },
      {
        type: "input",
        block_id: "projectBlock",
        element: {
          type: "static_select",
          action_id: "projectAction",
          options: projectList,
          initial_option: selProjectList[0] || undefined,
          placeholder: {
            type: "plain_text",
            text: "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç",
            emoji: true,
          },
        },
        label: {
          type: "plain_text",
          text: "–ù–∞–¥ –∫–∞–∫–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º?",
          emoji: true,
        },
      },
      {
        type: "input",
        block_id: "hoursBlock",
        element: {
          type: "static_select",
          action_id: "hoursAction",
          options: hoursList,
          placeholder: {
            type: "plain_text",
            text: "–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ",
            emoji: true,
          },
        },
        label: {
          type: "plain_text",
          text: "–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤?",
          emoji: true,
        },
      },
      {
        type: "input",
        block_id: "commentBlock",
        element: {
          type: "plain_text_input",
          action_id: "commentAction",
          multiline: true,
          placeholder: {
            type: "plain_text",
            text: "–ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å",
            emoji: true,
          },
        },
        label: {
          type: "plain_text",
          text: "–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã –¥–µ–ª–∞–ª–∏",
          emoji: true,
        },
      },
    ],
  };

  return {
    trigger_id: triggerId,
    view: modal,
  };
}

export function timeSuccess({ userId, projectId }) {
  return {
    channel: projectId,
    user: userId,
    text: "–°–ø–∞—Å–∏–±–æ! –Ø –¥–æ–±–∞–≤–∏–ª —á–∞—Å—ã –∫ –ø—Ä–æ–µ–∫—Ç—É.",
  };
}

export function addToExistProject({ channelId }) {
  return {
    channel: channelId,
    text: "Woff! –Ø —É–∂–µ –∑–Ω–∞—é –ø—Ä–æ —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç üôÉ",
  };
}

export function addNewProject({ channelId, name }) {
  return {
    channel: channelId,
    text: `–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç! –¢–µ–ø–µ—Ä—å –º–Ω–µ –º–æ–∂–Ω–æ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–æ —á–∞—Å—ã –Ω–∞ –ø—Ä–æ–µ–∫—Ç–µ ${name}\n\n –ê –µ—â–µ –≤–æ—Ç –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ —è –ø–æ–Ω–∏–º–∞—é:\n/rename [new_name] ‚Äî –ø–µ—Ä–µ–∏–º–µ–Ω—É–µ—Ç –ø—Ä–æ–µ–∫—Ç –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–æ–µ–∫—Ç–æ–≤\n/subprj -add [subprj_name] | -remove [subprj_name] | -list ‚Äî –ø–æ–º–æ–∂–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥–ø—Ä–æ–µ–∫—Ç—ã (–¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ —É—á–µ—Ç–∞ —á–∞—Å–æ–≤)`,
  };
}

export function addSubProject({ channelId, userId, subproject }) {
  return {
    channel: channelId,
    user: userId,
    text: `–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–Ω–æ—Å–∏—Ç—å —á–∞—Å—ã –≤ –ø–æ–¥–ø—Ä–æ–µ–∫—Ç ${subproject}`,
  };
}

export function removeSubProject({ channelId, userId, subproject }) {
  return {
    channel: channelId,
    user: userId,
    text: `–Ø —É–±—Ä–∞–ª –ø–æ–¥–ø—Ä–æ–µ–∫—Ç ${subproject} –∏–∑ —Å–ø–∏—Å–∫–∞. –í—Å–µ —É–∂–µ –≤–Ω–µ—Å–µ–Ω–Ω—ã–µ —á–∞—Å—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª.`,
  };
}

export function subProjectsList({ channelId, userId, subprojects = [] }) {
  const subprojectString = subprojects.join(", ");
  return {
    channel: channelId,
    user: userId,
    text: `–°–µ–π—á–∞—Å —Ä–∞–±–æ—Ç–∞ –∫–∏–ø–∏—Ç –ø–æ —ç—Ç–∏–º –ø–æ–¥–ø—Ä–æ–µ–∫—Ç–∞–º: ${subprojectString}`,
  };
}

export function noSubProjects({ channelId, userId, name }) {
  return {
    channel: channelId,
    user: userId,
    text: `–ù–∞ –ø—Ä–æ–µ–∫—Ç–µ ${name} –Ω–µ—Ç –ø–æ–¥–ø—Ä–æ–µ–∫—Ç–æ–≤. –í—Å–µ —Ñ–∏–≥–∞—á–∞—Ç –≤ –æ–¥–Ω–æ–π –ª–æ–¥–∫–µ.`,
  };
}

export function renameEmpty({ channelId, userId }) {
  return {
    channel: channelId,
    user: userId,
    text: `–Ø –Ω–µ —É–≤–∏–¥–µ–ª –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞. –ú–æ–∂–µ—Ç, –ø–ª–æ—Ö–æ –∏—Å–∫–∞–ª. –î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –≤–º–µ—Å—Ç–µ –µ—â–µ —Ä–∞–∑?`,
  };
}

export function renameSuccess({ channelId, userId, newName }) {
  return {
    channel: channelId,
    user: userId,
    text: `–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –±—É–¥–µ—Ç –Ω–∞–ø–∏—Å–∞–Ω–æ: ${newName}`,
  };
}

export function getMyLastTime({ channelId, userId, data }) {
  const { projectName, date, workDate, duration, comment } = data;
  return {
    channel: channelId,
    user: userId,
    text: `–ü–æ—Å–ª–µ–¥–Ω–∏–µ —á–∞—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —è –≤–∏–∂—É –Ω–∞ –ø—Ä–æ–µ–∫—Ç–µ ${projectName}, –≤—ã –∑–∞–Ω–µ—Å–ª–∏ ${date} –∑–∞ ${workDate}. –ü–æ—Ç—Ä–∞—Ç–∏–ª–∏ ${duration} —á–∞—Å–∞, –∞ –¥–µ–ª–∞–ª–∏ –≤–æ—Ç —á—Ç–æ:\n${comment}`,
  };
}

export function getUserLastTime({ channelId, userId, data }) {
  const { userName, projectName, date, workDate, duration, comment } = data;
  return {
    channel: channelId,
    user: userId,
    text: `–ü–æ—Å–ª–µ–¥–Ω–∏–µ —á–∞—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —è –≤–∏–∂—É –Ω–∞ –ø—Ä–æ–µ–∫—Ç–µ ${projectName}, ${userName} –∑–∞–Ω–µ—Å ${date} –∑–∞ ${workDate}. –ü–æ—Ç—Ä–∞—Ç–∏–ª ${duration} —á–∞—Å–∞, –∞ –¥–µ–ª–∞–ª –≤–æ—Ç —á—Ç–æ:\n${comment}`,
  };
}

export function userNoTime({ channelId, userId }) {
  return {
    channel: channelId,
    user: userId,
    text: `–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∑–∞–Ω–æ—Å–∏–ª —Å–≤–æ–∏ —á–∞—Å—ã. –í–æ–∑–º–æ–∂–Ω–æ, –µ–º—É –∏ –Ω–µ –Ω–∞–¥–æ.`,
  };
}

export function dailyManagerReport({ channelId, data }) {
  let text = "";
  if (data.length === 0) {
    text = "–§—Ä–∏–ª–∞–Ω—Å–µ—Ä—ã –µ—â–µ –Ω–µ –∑–∞–Ω–æ—Å–∏–ª–∏ —Å–≤–æ–∏ —á–∞—Å—ã –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å.";
  } else {
    text = "–í—á–µ—Ä–∞ —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä—ã –Ω–∞—Ä–∞–±–æ—Ç–∞–ª–∏:\n";
    for (const item of data) {
      text += `\n‚Ä¢ ${item.name}: ${item.time}`;
    }
  }
  return {
    channel: channelId,
    text,
  };
}

export function noTrackedTimeAlarm({ userId }) {
  return {
    channel: userId,
    text: `‚ÄºÔ∏è–ê–õ–ê–†–ú‚ÄºÔ∏è\n\n–Ø –Ω–µ –≤–∏–∂—É –∑–∞—Ç—Ä–µ–∫–∞–Ω–Ω—ã—Ö —Ç–æ–±–æ–π —á–∞—Å–æ–≤ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å. –°–¥–µ–ª–∞–π —ç—Ç–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!\n–ù–µ –Ω–µ—Ä–≤–∏—Ä—É–π –ù–∞—Ç–∞—à—É, –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏ –±–µ–¥–Ω—É—é —Å–æ–±–∞—á–∫—É... üíî`,
  };
}

export function newLeadNeverhund({ channelId, name, email, more }) {
  console.log(name);
  return {
    channel: channelId,
    text: `‚òéÔ∏è –£ –Ω–∞—Å –Ω–æ–≤—ã–π –ª–∏–¥ –Ω–∞ —Å–∞–π—Ç–µ Neverhund: ${name} (${email})\n\n${more}`,
    username: "–†–æ–±–æ—Ç-–ø—ã–ª–µ—Å–æ—Å",
    icon_url: "https://files.eduhund.com/robot_vc.png",
  };
}
